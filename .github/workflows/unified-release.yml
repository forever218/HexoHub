name: Build and Release Desktop (Unified)

# 🎯 触发条件：推送版本标签时触发
on:
  push:
    tags:
      - 'v*.*.*'           # 匹配 v2.7.0, v3.0.0 等正式版本
      - 'v*.*.*-beta.*'    # 匹配 v2.7.0-beta.1 等测试版本
      - 'v*.*.*-alpha.*'   # 匹配 v2.7.0-alpha.1 等内测版本

  # 🛠️ 手动触发（用于测试工作流）
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v2.7.0)'
        required: true
        type: string
      build_types:
        description: '构建类型'
        required: true
        default: 'ALL'
        type: choice
        options:
          - ALL
          - electron
          - tauri
          - electron,tauri

# 确保同一时间只运行一个构建任务
concurrency:
  group: unified-release-${{ github.ref }}
  cancel-in-progress: true

# 权限声明：允许创建 Release 和上传文件
permissions:
  contents: write  # 允许创建 Release 和上传资产

jobs:
  # ========================
  # 统一构建矩阵
  # ========================
  build:
    name: HexoHub_${{ matrix.build_type == 'electron' && 'Electron' || 'Tauri' }}_${{ matrix.os == 'windows-latest' && 'Windows' || matrix.os == 'macos-latest' && 'macOS' || 'Linux' }}_${{ github.ref_name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          # Electron 构建
          - build_type: electron
            os: windows-latest
            node_version: '18'
          - build_type: electron
            os: ubuntu-latest
            node_version: '18'
          # Tauri 构建
          - build_type: tauri
            os: windows-latest
            node_version: '20'
            rust_target: x86_64-pc-windows-msvc
          - build_type: tauri
            os: macos-latest
            node_version: '20'
            rust_target: x86_64-apple-darwin
          - build_type: tauri
            os: ubuntu-latest
            node_version: '20'
            rust_target: x86_64-unknown-linux-gnu
    
    steps:
      - name: 检查是否应该构建
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.build_types != 'ALL' && !contains(github.event.inputs.build_types, matrix.build_type) }}
        run: |
          echo "跳过构建：${{ matrix.build_type }} 不在选定的构建类型中"
          echo "选定的构建类型：${{ github.event.inputs.build_types }}"
          exit 1

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: 'npm'

      # Tauri 专用步骤
      - name: 设置 Rust 工具链
        if: matrix.build_type == 'tauri'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: ${{ matrix.rust_target }}

      - name: 配置 Rust 缓存
        if: matrix.build_type == 'tauri'
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri -> target

      # Linux Tauri 专用步骤
      - name: 安装系统依赖
        if: matrix.build_type == 'tauri' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      # Electron 专用步骤
      - name: 配置 Electron 缓存 (Windows)
        if: matrix.build_type == 'electron' && matrix.os == 'windows-latest'
        run: |
          echo "ELECTRON_BUILDER_CACHE=$env:USERPROFILE\.cache\electron-builder" >> $env:GITHUB_ENV
        shell: powershell

      - name: 配置 Electron 缓存 (Linux)
        if: matrix.build_type == 'electron' && matrix.os == 'ubuntu-latest'
        run: |
          echo "ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder" >> $GITHUB_ENV

      - name: 安装依赖
        run: npm ci

      - name: 构建前端
        run: npm run build

      # Electron 构建步骤
      - name: 构建 Electron 应用 (Windows)
        if: matrix.build_type == 'electron' && matrix.os == 'windows-latest'
        run: npm run make -- --win --publish always
        shell: powershell
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建 Electron 应用 (Linux)
        if: matrix.build_type == 'electron' && matrix.os == 'ubuntu-latest'
        run: npm run make -- --linux --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Tauri 构建步骤
      - name: 构建 Tauri 应用
        if: matrix.build_type == 'tauri'
        run: npm run tauri:build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      # 上传构建产物
      - name: 上传 Electron 构建产物
        if: matrix.build_type == 'electron'
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.os }}-build
          path: |
            dist/
            *.log

      - name: 上传 Tauri 构建产物 (Windows)
        if: matrix.build_type == 'tauri' && matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.os }}-build
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi

      - name: 上传 Tauri 构建产物 (macOS)
        if: matrix.build_type == 'tauri' && matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.os }}-build
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app

      - name: 上传 Tauri 构建产物 (Linux)
        if: matrix.build_type == 'tauri' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.os }}-build
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb

      # 发布到 GitHub Releases
      - name: 发布 Electron 到 GitHub Releases
        if: matrix.build_type == 'electron'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          files: |
            dist/**/*.exe
            dist/**/*.AppImage
            dist/**/*.deb
            dist/**/*.rpm
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.event.inputs.version, 'alpha') || contains(github.event.inputs.version, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 发布 Tauri 到 GitHub Releases (Windows)
        if: matrix.build_type == 'tauri' && matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          files: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.event.inputs.version, 'alpha') || contains(github.event.inputs.version, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 发布 Tauri 到 GitHub Releases (macOS)
        if: matrix.build_type == 'tauri' && matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          files: |
            src-tauri/target/release/bundle/dmg/*.dmg
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.event.inputs.version, 'alpha') || contains(github.event.inputs.version, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 发布 Tauri 到 GitHub Releases (Linux)
        if: matrix.build_type == 'tauri' && matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          files: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.event.inputs.version, 'alpha') || contains(github.event.inputs.version, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
